{"ast":null,"code":"var _jsxFileName = \"/home/circle/zarif_personal/0.October/Blog/client/src/components/singlePost/SinglePost.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useContext } from 'react';\nimport { Link, useLocation } from \"react-router-dom\";\nimport \"./singlePost.css\";\nimport axios from \"axios\";\nimport { Context } from '../../context/Context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SinglePost() {\n  _s();\n\n  const location = useLocation(); // take out the Id from path\n\n  const path = location.pathname.split('/')[2];\n  const [post, setPost] = useState({});\n  const pf = \"http://localhost:5000/images/\";\n  const {\n    user\n  } = useContext(Context);\n  const [title, setTitle] = useState(\"\");\n  const [desc, setDesc] = useState(\"\");\n  const [updateMode, setUpdateMode] = useState(false);\n  useEffect(() => {\n    const getPost = async () => {\n      const res = await axios.get(\"/posts/\" + path);\n      setPost(res.data);\n      setTitle(res.data.title);\n      setDesc(res.data.desc);\n    };\n\n    getPost();\n  }, [path]);\n\n  const handleDelete = async () => {\n    try {\n      // delete with post ID\n      await axios.delete(`/posts/` + path, {\n        data: {\n          username: user.username\n        }\n      });\n      window.location.replace(\"/\");\n    } catch (err) {}\n  };\n\n  const handleUpdate = async () => {\n    try {\n      await axios.put(`/posts/${post._id}`, {\n        username: user.username,\n        title,\n        desc\n      });\n      window.location.reload();\n      setUpdateMode(false);\n    } catch (err) {}\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"singlePost\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"singlePostWrapper\",\n      children: [post.photo && /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"singlePostImg\",\n        src: pf + post.photo,\n        alt: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this), updateMode ? /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: post.title,\n        className: \"singlePostTitleInput\",\n        autoFocus: true,\n        onChange: e => setTitle(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"singlePostTitle\",\n        children: [post.title, \"zarif\", post.username === (user === null || user === void 0 ? void 0 : user.username) && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"singlePostEdit\",\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"singlePostIcon far fa-edit\",\n            onClick: () => setUpdateMode(true)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"singlePostIcon far fa-trash-alt\",\n            onClick: handleDelete\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"singlePostInfo\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"Author:\", /*#__PURE__*/_jsxDEV(\"b\", {\n            className: \"singlePostAuthor\",\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              className: \"link\",\n              to: `?user=${post.username}`,\n              children: post.username\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"singlePostDate\",\n          children: new Date(post.createdAt).toDateString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), updateMode ? /*#__PURE__*/_jsxDEV(\"textarea\", {\n        className: \"singlePostDescInput\",\n        value: desc,\n        onChange: e => setDesc(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"singlePostDesc\",\n        children: post.desc\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this), updateMode && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"singlePostButton\",\n        onClick: handleUpdate,\n        children: \"Update\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SinglePost, \"xs7JL4oKuIn8mxMMLFGIhzF2qFM=\", false, function () {\n  return [useLocation];\n});\n\n_c = SinglePost;\n\nvar _c;\n\n$RefreshReg$(_c, \"SinglePost\");","map":{"version":3,"sources":["/home/circle/zarif_personal/0.October/Blog/client/src/components/singlePost/SinglePost.jsx"],"names":["React","useEffect","useState","useContext","Link","useLocation","axios","Context","SinglePost","location","path","pathname","split","post","setPost","pf","user","title","setTitle","desc","setDesc","updateMode","setUpdateMode","getPost","res","get","data","handleDelete","delete","username","window","replace","err","handleUpdate","put","_id","reload","photo","e","target","value","Date","createdAt","toDateString"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\nimport { Link, useLocation } from \"react-router-dom\";\nimport \"./singlePost.css\";\nimport axios from \"axios\";\nimport { Context } from '../../context/Context';\n\nexport default function SinglePost() {\n  const location = useLocation();\n  // take out the Id from path\n  const path = location.pathname.split('/')[2];\n  const [post, setPost] = useState({});\n  const pf = \"http://localhost:5000/images/\";\n  const { user } = useContext(Context);\n  const [title, setTitle] = useState(\"\");\n  const [desc, setDesc] = useState(\"\");\n  const [updateMode, setUpdateMode] = useState(false);\n\n\n  useEffect(() => {\n    const getPost = async () => {\n      const res = await axios.get(\"/posts/\" + path);\n      setPost(res.data);\n      setTitle(res.data.title);\n      setDesc(res.data.desc);\n    };\n    getPost();\n  }, [path]);\n\n  const handleDelete = async () => {\n    try {\n      // delete with post ID\n      await axios.delete(`/posts/` + path,\n        { data: { username: user.username } }\n      );\n      window.location.replace(\"/\");\n    } catch (err) {\n\n    }\n  }\n  const handleUpdate = async () => {\n    try {\n      await axios.put(`/posts/${post._id}`, {\n        username: user.username,\n        title,\n        desc,\n      });\n      window.location.reload();\n      setUpdateMode(false)\n    } catch (err) { }\n  };\n  return (\n    <div className=\"singlePost\">\n      <div className=\"singlePostWrapper\">\n        {post.photo && (\n          <img\n            className=\"singlePostImg\"\n            src={pf + post.photo}\n            alt=\"\"\n          />\n        )}\n        {updateMode ? (\n          <input\n            type=\"text\"\n            value={post.title}\n            className=\"singlePostTitleInput\"\n            autoFocus\n            onChange={(e) => setTitle(e.target.value)}\n          />\n        ) : (\n          <h1 className=\"singlePostTitle\">\n            {post.title}\n            zarif\n            {post.username === user?.username && (\n              <div className=\"singlePostEdit\">\n                <i className=\"singlePostIcon far fa-edit\" onClick={() => setUpdateMode(true)}></i>\n                <i className=\"singlePostIcon far fa-trash-alt\" onClick={handleDelete}></i>\n              </div>\n            )}\n          </h1>\n        )}\n        <div className=\"singlePostInfo\">\n          <span>\n            Author:\n            <b className=\"singlePostAuthor\">\n              <Link className=\"link\" to={`?user=${post.username}`}>\n                {post.username}\n              </Link>\n            </b>\n          </span>\n          <span className=\"singlePostDate\">{new Date(post.createdAt).toDateString()}</span>\n        </div>\n        {updateMode ? (\n          <textarea\n            className=\"singlePostDescInput\"\n            value={desc}\n            onChange={(e) => setDesc(e.target.value)}\n          />\n        ) : (\n          <p className=\"singlePostDesc\">\n            {post.desc}\n          </p>\n        )}\n        {updateMode && (\n          <button className=\"singlePostButton\" onClick={handleUpdate}>\n            Update\n          </button>\n        )}\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}